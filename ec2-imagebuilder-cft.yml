AWSTemplateFormatVersion: '2010-09-09'
Description: CloudFormation template for creating an Image Recipe
# Define the paramaters required
Parameters:
  LambdaCloudWatchLogGroupRetentionInDays:
    Type: Number
    Description: The number of days to retain the log events in the specified log group.
    AllowedValues: [1, 3, 5, 7, 14, 30, 60, 90, 120, 150, 180, 365, 400, 545, 731, 1827, 2192, 2557, 2922, 3288, 3653]

Resources:
  ImageRecipe:
    Type: "AWS::ImageBuilder::ImageRecipe"
    Properties:
      Name: patch-image-recipe
      Description: Image Recipe for patching AMI
      Version: 1.0.0
      ParentImage: "ami-*******" # Change AMI ID ##
      Components:
        - ComponentArn: "arn:aws:imagebuilder:ap-southeast-2:aws:component/update-linux/x.x.x" # AWS managed patch component ARN for linux server #
        - ComponentArn: "arn:aws:imagebuilder:ap-southeast-2:aws:component/reboot-test-linux/x.x.x" # AWS managed test component i.e. reboot the server after patching #

  MyInstanceProfile:
    Type: "AWS::IAM::InstanceProfile"
    Properties:
      Roles:
        - !Ref MyIAMRole

  MyIAMRole:
    Type: "AWS::IAM::Role"
    Properties:
      RoleName: my-iam-role
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      Path: /
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore"
        - "arn:aws:iam::aws:policy/EC2InstanceProfileForImageBuilder"
        - "arn:aws:iam::aws:policy/AmazonS3FullAccess"
        - "arn:aws:iam::aws:policy/AmazonInspector2FullAccess"
        - "arn:aws:iam::aws:policy/AmazonInspectorFullAccess"
        - "arn:aws:iam::aws:policy/EC2InstanceProfileForImageBuilderECRContainerBuilds"
      Policies:
        - PolicyName: my-iam-policy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - ec2:CreateImage
                  - ec2:StartInstances
                  - ec2:StopInstances
                  - ec2:CreateTags
                  - ssm:SendCommand
                  - inspector:CreateResourceGroup
                  - inspector:CreateAssessmentTarget
                Resource: "*"

  InfrastructureConfiguration:
    Type: "AWS::ImageBuilder::InfrastructureConfiguration"
    DependsOn: ImageBuilderSNSTopic
    Properties:
      Name: my-infrastructure-config
      Description: Infrastructure Configuration for AMI
      InstanceProfileName: !Ref MyInstanceProfile
      SnsTopicArn: !Ref ImageBuilderSNSTopic
      SecurityGroupIds:
        - "sg-******" # Change Security Group ##
      SubnetId: "subnet-******" # Change subnet ##
      Logging:
        S3Logs:
          S3BucketName: "s3_bucket_name" # Change S3 bucket name##

  ImagePipeline:
    Type: "AWS::ImageBuilder::ImagePipeline"
    Properties:
      Name: my-image-pipeline
      Description: Image Pipeline for creating AMI
      Schedule:
        ScheduleExpression: 'cron(0 0 1 * ? *)'
        PipelineExecutionStartCondition: 'EXPRESSION_MATCH_ONLY'
      ImageRecipeArn: !GetAtt ImageRecipe.Arn
      InfrastructureConfigurationArn: !GetAtt InfrastructureConfiguration.Arn
      Status: ENABLED


  ImageBuilderSNSTopic:
    Type: AWS::SNS::Topic
    Properties:
      Subscription:
      - Endpoint: !GetAtt StartAutomationExecutionHandler.Arn
        Protocol: lambda


  StartAutomationExecutionHandlerLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: /

  StartAutomationExecutionPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      PolicyDocument:
        Version: 2012-10-17
        Statement:
        - Effect: Allow
          Action:
          - ssm:PutParameter
          - ssm:AddTagsToResource
          - ssm:GetParameters
          Resource: !Sub arn:${AWS::Partition}:ssm:${AWS::Region}:${AWS::AccountId}:parameter/*
        - Effect: Allow
          Action:
          - sns:Publish
          Resource: !Ref ImageBuilderSNSTopic
        - Effect: Allow
          Action:
          - logs:CreateLogStream
          - logs:PutLogEvents
          Resource: !GetAtt StartAutomationExecutionHandlerLogGroup.Arn
      Roles:
        - !Ref StartAutomationExecutionHandlerLambdaRole

  LambdaLogGroupPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt StartAutomationExecutionHandler.Arn
      Principal: logs.amazonaws.com
      SourceArn: !GetAtt StartAutomationExecutionHandlerLogGroup.Arn

  LambdaPermissionForSNS:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt StartAutomationExecutionHandler.Arn
      Principal: sns.amazonaws.com
      SourceArn: !Ref ImageBuilderSNSTopic

  StartAutomationExecutionHandlerLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Join ['/', ['/aws/lambda', !Ref StartAutomationExecutionHandler]]
      RetentionInDays: !Ref LambdaCloudWatchLogGroupRetentionInDays

  # Trigger SSM Automation Document resources
  StartAutomationExecutionHandler:
    Type: AWS::Lambda::Function
    Properties:
      Handler: index.lambda_handler
      Runtime: python3.9
      Description: Update SSM Parameter with the latest AMI
      Role: !GetAtt StartAutomationExecutionHandlerLambdaRole.Arn
      Code:
        ZipFile: |
          import json
          import boto3
          import logging

          logger = logging.getLogger()
          logger.setLevel(logging.INFO)

          ssm_parameter_name = '/ec2-imagebuilder/latest'
          session = boto3.session.Session()


          def lambda_handler(event, context):
              logger.info('Printing event: {}'.format(event))
              process_sns_event(event)
              return None


          def process_sns_event(event):
              for record in event['Records']:
                  event_message = record['Sns']['Message']

                  # convert the event message to json
                  message_json = json.loads(event_message)

                  # obtain the image state
                  image_state = message_json['state']['status']

                  # update the SSM parameter if the image state is available
                  if image_state == 'AVAILABLE':
                      logger.info('Image is available')

                      recipe_name = message_json['name']

                      for ami in message_json['outputResources']['amis']:
                          # obtain ami id
                          logger.info('AMI ID: {}'.format(ami['image']))

                          # update SSM parameter
                          ssm_client = session.client(
                              service_name='ssm',
                              region_name=ami['region'],
                          )
                          response = ssm_client.put_parameter(
                              Name=ssm_parameter_name,
                              Description='Latest AMI ID',
                              Value=ami['image'],
                              Type='String',
                              Overwrite=True,
                              Tier='Standard',
                          )
                          logger.info('SSM Updated: {}'.format(response))

                          # add tags to the SSM parameter
                          ssm_client.add_tags_to_resource(
                              ResourceType='Parameter',
                              ResourceId=ssm_parameter_name,
                              Tags=[
                                  {'Key': 'Source', 'Value': 'EC2 Image Builder'},
                                  {'Key': 'AMI_REGION', 'Value': ami['region']},
                                  {'Key': 'AMI_ID', 'Value': ami['image']},
                                  {'Key': 'AMI_NAME', 'Value': ami['name']},
                                  {'Key': 'RECIPE_NAME', 'Value': recipe_name},
                                  {
                                      'Key': 'SOURCE_PIPELINE_ARN',
                                      'Value': message_json['sourcePipelineArn'],
                                  },
                              ],
                          )

              # end of Lambda function
              return None
Outputs:
  ImageRecipeArn:
    Value: !GetAtt ImageRecipe.Arn
    Description: ARN of the created Image Recipe

  ImagePipelineArn:
    Value: !GetAtt ImagePipeline.Arn
    Description: ARN of the created Image Pipeline
